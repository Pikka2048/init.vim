-- This file was generated by setup script
-- Generated at: 2024-11-25 13:24:55

-- functions.lua
local M = {}

-- ターミナルを開く関数
function M.open_terminal()
    local current_win = vim.api.nvim_get_current_win()
    vim.cmd('topleft 10split')
    local buf = vim.api.nvim_create_buf(false, true)
    vim.api.nvim_win_set_buf(0, buf)
    local shell = vim.o.shell
    local term_job_id = vim.fn.termopen(shell)
    vim.cmd('startinsert')
    vim.api.nvim_set_current_win(current_win)
    return buf, term_job_id
end

-- Pythonファイルを実行する関数
function M.run_python()
    vim.cmd('write')
    local file_path = vim.fn.expand('%:p')
    local original_win = vim.api.nvim_get_current_win()
    
    local terminal_win = nil
    local terminal_buf = nil
    local terminal_job_id = nil
    
    for _, win in ipairs(vim.api.nvim_list_wins()) do
        local buf = vim.api.nvim_win_get_buf(win)
        if vim.bo[buf].buftype == 'terminal' then
            terminal_win = win
            terminal_buf = buf
            terminal_job_id = vim.b[buf].terminal_job_id
            break
        end
    end
    
    if not terminal_win then
        terminal_buf, terminal_job_id = M.open_terminal()
    else
        vim.api.nvim_set_current_win(terminal_win)
        vim.defer_fn(function()
            vim.api.nvim_set_current_win(original_win)
        end, 10)
    end
    
    if terminal_job_id then
        local cmd = string.format('cd "%s" && poetry run python "%s"\n', 
            vim.fn.fnamemodify(file_path, ':h'),
            file_path
        )
        vim.fn.chansend(terminal_job_id, cmd)
        vim.api.nvim_set_current_win(original_win)
    else
        vim.api.nvim_err_writeln("Failed to get terminal job ID")
    end
end

return M
